---
title: Cod.select
toc: true
---

h1. Waiting for data

Always the same thing with these mail boxes. No one ever writes.

<pre class="sh_ruby"><code title="no one ever writes">
  box = Cod.pipe
  
  Cod.select(0.1, box)  # => nil
</code></pre>

Hey, maybe someone dropped us an email?

<pre class="sh_ruby"><code title="an email">
  box = Cod.pipe
  mail = Cod.pipe.split
  
  mail.write.put 'an email'
  
  ready = Cod.select(0.1, box: box, email: mail.read)  

  ready.has_key?(:email)      # => true
  ready[:email] == mail.read  # => true
</code></pre>

h2. Server structure: a big loop

The real message here is that _cod_ can do something almost like a
<code>select(2)</code>, only better. It allows for freely mixing _cod_
channels, common IO streams and implementors of the <code>#to_read_fds</code>
message.

This means that your server can be built around a big loop. At the top of the
loop you have a select on all your important channels, like this: 

<pre class="sh_ruby"><code>
  loop do
    ready = Cod.select(nil, channel_hash)
    
    process_channel1 if ready.has_key? :channel1
    process_channel2 if ready.has_key? :channel2
    process_channel3 if ready.has_key? :channel3
    
    # ...
  end
</code></pre>

The select facility only works for checking if data is available on a channel.
This makes sense, since _cod_ channels are always ready for writing. 

h2. Limitations

Currently, you cannot use beanstalk channels inside a <code>Cod.select</code>.
We have ideas on how to change this and might get around to it sometime soon.

!../images/fish.png!
